name: Dotfiles CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Comprehensive code quality validation
  code-quality:
    name: Code Quality & Syntax
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install validation tools
        run: |
          # Core linters
          sudo apt-get update -qq
          sudo apt-get install -y shellcheck luarocks libxml2-utils

          # Python tools
          pip install yamllint tomli

          # Lua tools
          sudo luarocks install luacheck

          # Node tools
          npm install -g markdownlint-cli

      - name: Validate all file types
        run: |
          set -e

          # Shell scripts validation
          echo "üîç Shell Scripts"
          find . -name "*.sh" -type f ! -path "./.git/*" | while read -r file; do
            echo "  Checking: $file"
            shellcheck -S warning "$file"
            bash -n "$file"
          done

          # YAML files validation
          echo "üîç YAML Files"
          find . -name "*.yml" -o -name "*.yaml" |
            grep -v ".git" | head -10 | while read -r file; do
            echo "  Checking: $file"
            yamllint -d relaxed "$file"
          done

          # JSON files validation
          echo "üîç JSON Files"
          find . -name "*.json" -type f ! -path "./.git/*" | while read -r file; do
            echo "  Checking: $file"
            python -m json.tool "$file" >/dev/null
          done

          # TOML files validation
          echo "üîç TOML Files"
          find . -name "*.toml" -type f ! -path "./.git/*" | while read -r file; do
            echo "  Checking: $file"
            python -c "import tomli; tomli.load(open('$file', 'rb'))"
          done

          # Lua files validation
          echo "üîç Lua Files"
          lua_files=$(find . -name "*.lua" -type f ! -path "./.git/*" || true)
          if [ -n "$lua_files" ]; then
            echo "$lua_files" | while read -r file; do
              echo "  Checking: $file"
              luacheck --globals vim "$file"
            done
          fi

          # Markdown files validation
          echo "üîç Markdown Files"
          markdownlint '**/*.md' --ignore node_modules || true

          # Brewfile validation
          if [ -f "Brewfile" ]; then
            echo "üîç Brewfile"
            grep -E '^(tap|brew|cask)\s+' Brewfile >/dev/null
            [ $(grep -E '^(brew|cask)\s+' Brewfile | sort | uniq -d | wc -l) -eq 0 ]
          fi

  # Go-specific validation (if Go files exist)
  go-validation:
    name: Go Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Go validation suite
        run: |
          if find . -name "*.go" -type f | grep -q .; then
            echo "üîç Go validation suite"

            # Install tools
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

            # Validate
            gofmt -l . | grep -q . && { echo "‚ùå Unformatted files"; exit 1; } || echo "‚úÖ Format check"
            go vet ./... && echo "‚úÖ Go vet passed"
            golangci-lint run --timeout=5m && echo "‚úÖ Linting passed"
            gosec ./... >/dev/null 2>&1 && echo "‚úÖ Security scan passed" || echo "‚ö†Ô∏è  Security issues found"
          else
            echo "‚è≠Ô∏è  No Go files found"
          fi

  # Dedicated Zsh configuration validation
  zsh-syntax:
    name: Zsh Configuration Check
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install validation tools
        run: |
          brew install uv || true
          uv tool install beautysh --with setuptools
          export PATH="$HOME/.local/bin:$PATH"

      - name: Check .zshrc with multiple validators
        run: |
          if [ -f .zshrc ]; then
            echo "=== Zsh Configuration Validation ==="
            exit_code=0

            # Native zsh syntax check
            echo "‚Üí Running zsh native syntax check..."
            if zsh -n .zshrc 2>&1; then
              echo "  ‚úì Zsh syntax is valid"
            else
              echo "  ‚úó Zsh syntax errors found"
              exit_code=1
            fi

            # Beautysh format check
            echo "‚Üí Running beautysh format check..."
            export PATH="$HOME/.local/bin:$PATH"
            if PYTHONWARNINGS="ignore" beautysh --check .zshrc 2>/dev/null; then
              echo "  ‚úì Format check passed"
            else
              echo "  ‚ö† Format issues detected"
              exit_code=1
            fi

            # Static analysis for common issues
            echo "‚Üí Checking for common anti-patterns..."

            # Check for undefined variables
            if grep -E '\$[a-zA-Z_][a-zA-Z0-9_]*' .zshrc |
               grep -v '\${' | grep -v '\$(' |
               grep -v '\$PATH' | grep -v '\$HOME' > /dev/null; then
              echo "  ‚ö† Potential undefined variables found"
            fi

            # Check for command substitution using backticks
            if grep '`.*`' .zshrc > /dev/null; then
              echo "  ‚ö† Found backticks - consider using \$(command) syntax"
              exit_code=$((exit_code + 1))
            fi

            echo "=== Validation complete ==="
            exit $exit_code
          else
            echo "No .zshrc file found - skipping"
          fi

  # Cross-platform compatibility testing
  platform-compatibility:
    name: Platform Compatibility
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14]
        include:
          - os: ubuntu-latest
            test-type: "Linux Compatibility"
          - os: macos-latest
            test-type: "macOS Latest"
          - os: macos-14
            test-type: "macOS 14"
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: ${{ matrix.test-type }} Tests
        run: |
          echo "üîç ${{ matrix.test-type }} Tests"

          # Common validations
          find . -name "*.sh" -type f -exec bash -n {} \; && echo "‚úÖ Shell syntax"

          # Platform-specific validations
          if [[ "${{ matrix.os }}" == "macos"* ]]; then
            # macOS-specific tests
            [ -f ".tmux.conf" ] && tmux -f .tmux.conf list-keys >/dev/null 2>&1 && echo "‚úÖ tmux config valid"
            [ -f ".zshrc" ] && zsh -n .zshrc && echo "‚úÖ zsh config valid"

            # Test plist if exists
            find . -name "*.plist" -exec plutil -lint {} \; 2>/dev/null && echo "‚úÖ plist files valid"
          fi

  # Bootstrap script testing
  bootstrap-test:
    name: Bootstrap Script Test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test bootstrap script
        run: |
          if [ -f ".config/yadm/bootstrap" ]; then
            echo "üîç Testing bootstrap script"

            # Create test environment
            export TEST_HOME=$GITHUB_WORKSPACE/test_home
            mkdir -p $TEST_HOME/.config/yadm

            # Copy and test bootstrap script
            cp .config/yadm/bootstrap $TEST_HOME/.config/yadm/bootstrap
            chmod +x $TEST_HOME/.config/yadm/bootstrap

            echo "Testing bootstrap syntax..."
            bash -n $TEST_HOME/.config/yadm/bootstrap
            echo "‚úÖ Bootstrap syntax check passed"
          else
            echo "‚è≠Ô∏è  No bootstrap script found"
          fi

  # macOS integration testing
  macos-integration:
    name: macOS Integration Tests
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test macOS-specific components
        run: |
          echo "üîç macOS Integration Tests"

          # Test LaunchAgent plist template
          if [ -f "Library/LaunchAgents/com.daily-maintenance.plist.template" ]; then
            echo "Testing plist template..."
            sed "s|{{HOME}}|$HOME|g" Library/LaunchAgents/com.daily-maintenance.plist.template > /tmp/test.plist
            plutil -lint /tmp/test.plist
            rm /tmp/test.plist
            echo "‚úÖ Plist template valid"
          fi

          # Test maintenance scripts
          for script in daily-maintenance.sh daily-maintenance-control.sh; do
            if [ -f "$script" ]; then
              echo "Testing syntax: $script"
              bash -n "$script"
            fi
          done

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
        continue-on-error: true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

  # Documentation validation
  documentation:
    name: Documentation Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check documentation
        run: |
          [ -f "README.md" ] && echo "‚úÖ README.md exists" || { echo "‚ùå README.md missing"; exit 1; }

      - name: Validate markdown
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: '**/*.md'
        continue-on-error: true

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          check-modified-files-only: 'yes'
        continue-on-error: true

  # Final summary
  summary:
    name: ‚úÖ CI Complete
    needs: [code-quality, go-validation, zsh-syntax, platform-compatibility,
            bootstrap-test, macos-integration, security-scan, documentation]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report status
        run: |
          echo "## üéØ CI Pipeline Complete"
          echo "All quality checks have been executed."
          echo "Review individual job results for details."
