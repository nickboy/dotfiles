name: Dotfiles CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Fast syntax and style validation
  lint:
    name: Code Quality & Syntax
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install linting tools
        run: |
          # Core linters
          sudo apt-get update -qq
          sudo apt-get install -y shellcheck luarocks libxml2-utils

          # Python tools
          pip install yamllint tomli

          # Lua tools
          sudo luarocks install luacheck

          # Node tools
          npm install -g markdownlint-cli

      - name: Validate all file types
        run: |
          set -e

          # Helper function for clean validation
          validate_files() {
            local pattern="$1" validator="$2" description="$3"
            local files=$(find . -name "$pattern" -type f ! -path "./.git/*" ! -path "./node_modules/*" 2>/dev/null || true)

            if [ -n "$files" ]; then
              echo "üîç $description"
              echo "$files" | while read -r file; do
                echo "  Validating: $file"
                eval "$validator \"$file\""
              done
              echo "‚úÖ $description validation passed"
            else
              echo "‚è≠Ô∏è  No $description files found"
            fi
          }

          # File type validations
          validate_files "*.sh" "shellcheck -S warning" "Shell Scripts"
          validate_files "*.json" "python -m json.tool >/dev/null" "JSON Files"
          validate_files "*.yml" "yamllint -d relaxed" "YAML Files"
          validate_files "*.yaml" "yamllint -d relaxed" "YAML Files"
          validate_files "*.toml" "python -c 'import tomli; tomli.load(open(\$1, \"rb\"))'" "TOML Files"
          validate_files "*.md" "markdownlint" "Markdown Files"

          # Lua files (special handling for globals and xargs)
          lua_files=$(find . -name "*.lua" -type f ! -path "./.git/*" 2>/dev/null || true)
          if [ -n "$lua_files" ]; then
            echo "üîç Lua Files (Neovim configs)"
            echo "$lua_files" | while read -r file; do
              echo "  Validating: $file"
              luacheck --globals vim "$file"
            done
            echo "‚úÖ Lua validation passed"
          fi

          # Brewfile validation
          if [ -f "Brewfile" ]; then
            echo "üîç Brewfile"
            grep -E '^(tap|brew|cask)\s+' Brewfile >/dev/null
            [ $(grep -E '^(brew|cask)\s+' Brewfile | sort | uniq -d | wc -l) -eq 0 ]
            echo "‚úÖ Brewfile validation passed"
          fi

  # Go-specific validation (if Go files exist)
  go-validation:
    name: Go Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Go validation suite
        run: |
          if find . -name "*.go" -type f | grep -q .; then
            echo "üîç Running Go validation suite..."

            # Install tools
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

            # Validate
            gofmt -l . | grep -q . && { echo "‚ùå Unformatted files"; exit 1; } || echo "‚úÖ Format check"
            go vet ./... && echo "‚úÖ Go vet passed"
            golangci-lint run --timeout=5m && echo "‚úÖ Linting passed"
            gosec ./... >/dev/null 2>&1 && echo "‚úÖ Security scan passed" || echo "‚ö†Ô∏è  Security issues found"
          else
            echo "‚è≠Ô∏è  No Go files found"
          fi

  # Platform-specific tests
  platform-tests:
    name: Platform Integration
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            test-type: "Linux Compatibility"
          - os: macos-latest
            test-type: "macOS Integration"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: ${{ matrix.test-type }}
        run: |
          echo "üîç ${{ matrix.test-type }} Tests"

          # Common validations
          find . -name "*.sh" -type f -exec bash -n {} \; && echo "‚úÖ Shell syntax"

          # Platform-specific validations
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS-specific tests
            [ -f ".tmux.conf" ] && tmux -f .tmux.conf list-keys >/dev/null 2>&1 && echo "‚úÖ tmux config valid"
            [ -f ".zshrc" ] && zsh -n .zshrc && echo "‚úÖ zsh config valid"

            # Test plist if exists
            find . -name "*.plist" -exec plutil -lint {} \; 2>/dev/null && echo "‚úÖ plist files valid"
          fi

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
        continue-on-error: true

      - name: Run secret detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

  # Documentation quality
  docs:
    name: Documentation Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check documentation
        run: |
          [ -f "README.md" ] && echo "‚úÖ README.md exists" || { echo "‚ùå README.md missing"; exit 1; }

      - name: Validate markdown
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: '**/*.md'
        continue-on-error: true

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          check-modified-files-only: 'yes'
        continue-on-error: true

  # Final summary
  summary:
    name: ‚úÖ CI Complete
    needs: [lint, go-validation, platform-tests, security, docs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report status
        run: |
          echo "## üéØ CI Pipeline Complete"
          echo "All quality checks have been executed."
          echo "Review individual job results for details."